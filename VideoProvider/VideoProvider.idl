import "oaidl.idl";
import "ocidl.idl";
import "shobjidl.idl";

//==========================================================================================
//                                      ENUMS
//==========================================================================================

typedef enum VIDEO_CHANNEL_TYPES
{
	VIDEO_CHANNEL_UNKNOWN = 0 ,

	VIDEO_CHANNEL_CAMERA ,

} VIDEO_CHANNEL_TYPES;

typedef enum SERVICE_TYPES
{
	SERVICE_UNKNOWN = 0 ,

	SERVICE_CONFIGURATION ,

} SERVICE_TYPES;

//==========================================================================================
//                                      INTERFACES
//==========================================================================================

[
	object,
	uuid(961F1178-D82B-49AC-A4FE-687FCEF999A8),
	pointer_default(unique)
]
interface IInitializer : IUnknown
{
	[id(1)]   HRESULT Initialize ([in] VARIANT data );
};

//==========================================================================================

[
	object,
	uuid(942603F1-4744-4C1A-B35B-0D4164E82B9E),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IBackgroundThread : IDispatch
{
	[propget, id(1)]    HRESULT Handle          ([out, retval]	ULONG*						pVal);
	[propget, id(2)]    HRESULT HandleEventExit ([out, retval]	ULONG*						pVal);
	[propget, id(3)]    HRESULT Identifier      ([out, retval]	ULONG*						pVal);
	[id(4)]             HRESULT IsStarted       ([out,retval]	VARIANT_BOOL*				out_result);
	[id(5)]             HRESULT IsAlive         ([out,retval]	VARIANT_BOOL*				out_result);
	[id(6),local]       HRESULT Start           ([in]			void*						lpRoutine ,			[in]		 void*			lpRoutineArg		, [out,retval]	 VARIANT_BOOL*	out_result);
	[id(7)]             HRESULT Stop            (void);
	[id(8)]             HRESULT CanContinue     ([in]			ULONG						timeout,			[out,retval] VARIANT_BOOL*	out_result);
	[id(9)]             HRESULT PumpEvents      (void);
};

//==========================================================================================

[
	object,
	uuid(EA91DC21-25EA-44C7-AD60-0428D8B6C40B),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoGraphConfiguration : IDispatch
{
	[propget, id(1)] HRESULT Window        ([out, retval] OLE_HANDLE* pVal);
	[propput, id(1)] HRESULT Window        ([in]          OLE_HANDLE newVal);
	[propget, id(2)] HRESULT UseGrabber    ([out, retval] VARIANT_BOOL* pVal);
	[propput, id(2)] HRESULT UseGrabber    ([in]          VARIANT_BOOL newVal);
	[propget, id(3)] HRESULT FormatID      ([out, retval] BSTR* pVal);
	[propput, id(3)] HRESULT FormatID      ([in]          BSTR newVal);
	[propget, id(4)] HRESULT DeviceName    ([out, retval] BSTR* pVal);
	[propput, id(4)] HRESULT DeviceName    ([in]          BSTR newVal);
	[propget, id(5)] HRESULT FileSource    ([out, retval] BSTR* pVal);
	[propput, id(5)] HRESULT FileSource    ([in]          BSTR newVal);
	[id(6)]          HRESULT Reset         (void);
};

//==========================================================================================

[
	object,
	uuid(B108EF2A-39AC-43D7-A027-923333C2ECA7),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoGraph : IDispatch
{
	[propget, id(1)] HRESULT Configuration               ([out,retval] IVideoGraphConfiguration** pVal);
	[id(2)]          HRESULT Create                      ([out,retval] VARIANT_BOOL* out_result);
	[id(3)]          HRESULT Destroy                     (void);
	[id(4)]          HRESULT SelectDevice                ([out,retval] VARIANT_BOOL* out_result);
	[id(5)]          HRESULT SelectDeviceFormat          ([out,retval] VARIANT_BOOL* out_result);
	[id(6)]          HRESULT AddDeviceFilter             ([out,retval] VARIANT_BOOL* out_result);
	[id(7)]          HRESULT AddFileSourceFilter         ([out,retval] VARIANT_BOOL* out_result);
	[id(8)]          HRESULT AddGrabberFilter            ([out,retval] VARIANT_BOOL* out_result);
	[id(10)]         HRESULT RenderDeviceStream          ([in] BSTR pinCategoryId , [out,retval] VARIANT_BOOL* out_result);
	[id(11)]         HRESULT RenderDeviceCaptureStream   ([out,retval] VARIANT_BOOL* out_result);
	[id(12)]         HRESULT RenderDevicePreviewStream   ([out,retval] VARIANT_BOOL* out_result);
	[id(13)]         HRESULT RenderFileStream            ([out,retval] VARIANT_BOOL* out_result);
	[id(14)]         HRESULT SetupWindow                 ([out,retval] VARIANT_BOOL* out_result);
	[id(16)]         HRESULT CloseWindow                 (void);
	[id(17)]         HRESULT IsRunning                   ([out,retval] VARIANT_BOOL* out_result);
	[id(18)]         HRESULT Run                         ([out,retval] VARIANT_BOOL* out_result);
	[id(19)]         HRESULT Shutdown                    (void);
	[id(20)]         HRESULT PumpsEvents                 (void);
	[id(21)]         HRESULT Resize                      (void);
};

//==========================================================================================

[
	object,
	uuid(185643D0-1786-47F1-8AE6-95125CC35C81),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMediaMonikerList : IDispatch
{
	[propget, id(1)] HRESULT Count      ([out,retval] LONG* pVal);
	[propget, id(2)] HRESULT IsEmpty    ([out,retval] VARIANT_BOOL* pVal);
	[propget, id(3)] HRESULT IsFull     ([out,retval] VARIANT_BOOL* pVal);
	[id(4)]          HRESULT Any        ([out,retval] VARIANT_BOOL* out_result);
	[id(5)]          HRESULT Contains   ([in] IMoniker* moniker, VARIANT_BOOL* out_result);
	[id(6)]          HRESULT Add        ([in] IMoniker* moniker, VARIANT_BOOL* out_result);
	[id(7)]          HRESULT FindAt     ([in] LONG index, [out,retval] IMoniker** out_result);
	[id(8)]          HRESULT RemoveAt   ([in] LONG index, [out,retval] VARIANT_BOOL* out_result);
	[id(9)]          HRESULT Remove     ([in] IMoniker* moniker, VARIANT_BOOL* out_result);
	[id(10)]         HRESULT Clear      (void);
};

//==========================================================================================

[
	object,
	uuid(C2B43E1F-B6A6-4C3E-BEE9-5B9053E8A748),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMediaMonikerStore : IDispatch
{
	[id(1)] HRESULT FindAll             ([out,retval] IMediaMonikerList** out_result);
	[id(2)] HRESULT FindByName          ([in] BSTR deviceName, [out,retval] IMoniker** out_result);
};

//==========================================================================================

[
	object,
	uuid(3DEBBEEF-7996-4D4F-B2D6-C5E25D759709),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoDeviceInfo : IDispatch
{
	[propget, id(1)] HRESULT Name          ([out, retval] BSTR* pVal);
	[propput, id(1)] HRESULT Name          ([in] BSTR newVal);
	[propget, id(2)] HRESULT Description   ([out, retval] BSTR* pVal);
	[propput, id(2)] HRESULT Description   ([in] BSTR newVal);
	[propget, id(3)] HRESULT Path          ([out, retval] BSTR* pVal);
	[propput, id(3)] HRESULT Path          ([in] BSTR newVal);
	[id(4)]          HRESULT Validate      ([out,retval] VARIANT_BOOL* out_result);
};

//==========================================================================================

[
	object,
	uuid(7987D343-C893-411A-A467-204648E4259B),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoDeviceInfoList : IDispatch
{
	[propget, id(1)] HRESULT Count      ([out,retval] LONG* pVal);
	[propget, id(2)] HRESULT IsEmpty    ([out,retval] VARIANT_BOOL* pVal);
	[propget, id(3)] HRESULT IsFull     ([out,retval] VARIANT_BOOL* pVal);
	[id(4)]          HRESULT Any        ([out,retval] VARIANT_BOOL* out_result);
	[id(5)]          HRESULT Contains   ([in] IVideoDeviceInfo* deviceInfo, VARIANT_BOOL* out_result);
	[id(6)]          HRESULT Add        ([in] IVideoDeviceInfo* deviceInfo, VARIANT_BOOL* out_result);
	[id(7)]          HRESULT FindAt     ([in] LONG index, [out,retval] IVideoDeviceInfo** out_result);
	[id(8)]          HRESULT RemoveAt   ([in] LONG index, [out,retval] VARIANT_BOOL* out_result);
	[id(9)]          HRESULT Remove     ([in] IVideoDeviceInfo* deviceInfo, VARIANT_BOOL* out_result);
	[id(10)]         HRESULT Clear      (void);
};

//==========================================================================================

[
	object,
	uuid(49500E1F-5B1C-4214-995A-98002496C894),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoDeviceInfoAdapter : IDispatch
{
	[id(1)] HRESULT Adapt      ([in] IMoniker* moniker, [out,retval] IVideoDeviceInfo** out_result);
};

//==========================================================================================

[
	object,
	uuid(BCE3117A-8B93-4E27-95E5-ACF6FEF3EEF8),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoDeviceInfoDiscovery : IDispatch
{
	[id(1)] HRESULT SearchDevices     ([out,retval] IVideoDeviceInfoList** out_result);
};

//==========================================================================================

[
	object,
	uuid(B4584341-EC02-4084-8E53-76F388363A8C),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoPlayer : IDispatch
{
	[propget, id(1)] HRESULT Window      ([out,retval] OLE_HANDLE* pVal);
	[propput, id(1)] HRESULT Window      ([in]         OLE_HANDLE  newVal);
	[id(2)]          HRESULT IsPlaying   ([out,retval] VARIANT_BOOL* out_result);
	[id(3)]          HRESULT Play        ([out,retval] VARIANT_BOOL* out_result);
	[id(4)]          HRESULT Stop        ();
	[id(5)]          HRESULT Refresh     ();
};

//==========================================================================================

[
	object,
	uuid(2A240A41-CA05-43D7-8D22-F8DCA58F6B8B),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IDeviceVideoPlayer : IDispatch
{
	[propget, id(1)] HRESULT DeviceName   ([out, retval] BSTR* pVal);
	[propput, id(1)] HRESULT DeviceName   ([in]          BSTR  newVal);
};

//==========================================================================================

[
	object,
	uuid(36522271-0168-4B6E-82F4-C83C2C22AAEE),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface ITest : IDispatch
{
	[id(1)] HRESULT Run   (void);
};

//==========================================================================================

[
	object,
	uuid(744465B7-9EC6-4E77-AD7A-7AAFDCCA339D),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoGraphRunner : IDispatch
{
	[id(1)] HRESULT IsStarted    ([out,retval] VARIANT_BOOL* out_result);
	[id(2)] HRESULT Start        ([in] IVideoGraph* graph, [out,retval] VARIANT_BOOL* out_result);
	[id(3)] HRESULT Stop         (void);
};

//==========================================================================================

[
	object,
	uuid(10DC614F-D061-4EE7-A071-EBFEF8BC9C2B),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface ISetting : IDispatch
{
	[propget, id(1)] HRESULT UniqueID   ([out, retval] BSTR* pVal);
	
	[propget, id(2)] HRESULT Value      ([out, retval] BSTR* pVal);
	
	[propput, id(2)] HRESULT Value      ([in] BSTR newVal);
	
	[propget, id(3)] HRESULT IsDirty    ([out, retval] VARIANT_BOOL* pVal);
	
	[propput, id(3)] HRESULT IsDirty    ([in] VARIANT_BOOL newVal);
	
	[id(4)]          HRESULT Validate   ([out,retval] VARIANT_BOOL* out_result);
	
	[id(5)]          HRESULT Reset      (void);
};

//==========================================================================================

[
	object,
	uuid(9F7032F7-82EC-44A6-840C-5D2CE1694B1F),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface ISettingList : IDispatch
{
	[propget, id(1)] HRESULT Count         ([out, retval] LONG* pVal);
	[propget, id(2)] HRESULT IsEmpty       ([out, retval] VARIANT_BOOL* pVal);
	[propget, id(3)] HRESULT IsFull        ([out, retval] VARIANT_BOOL* pVal);
	[id(4)]          HRESULT Any           ([out,retval]  VARIANT_BOOL* out_result);
	[id(5)]          HRESULT Contains      ([in] ISetting* setting, [out,retval] VARIANT_BOOL* out_result);
	[id(6)]          HRESULT Exists        ([in] BSTR uniqueID, [out,retval] VARIANT_BOOL* out_result);
	[id(7)]          HRESULT Add           ([in] ISetting* setting, [out,retval] VARIANT_BOOL* out_result);
	[id(8)]          HRESULT FindByID      ([in] BSTR uniqueID, [out,retval] ISetting** out_result);
	[id(9)]          HRESULT FindAt        ([in] LONG index, [out,retval] ISetting** out_result);
	[id(10)]         HRESULT GetByID       ([in] BSTR uniqueID, [out,retval] ISetting** out_result);
	[id(11)]         HRESULT GetAt         ([in] LONG index, [out,retval] ISetting** out_result);
	[id(12)]         HRESULT Remove        ([in] ISetting* setting, [out,retval] VARIANT_BOOL* out_result);
	[id(13)]         HRESULT RemoveByID    ([in] BSTR uniqueID, [out,retval] VARIANT_BOOL* out_result);
	[id(14)]         HRESULT RemoveAt      ([in] LONG index, [out,retval] VARIANT_BOOL* out_result);
	[id(15)]         HRESULT Clear         (void);
};

//==========================================================================================

[
	object,
	uuid(01A4FD65-0791-4FAC-AC26-CEE233B7F447),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface ISettingFactory : IDispatch
{
	[id(1)] HRESULT    CreateSetting   ([in] BSTR uniqueID, [out,retval] ISetting** out_result);
};

//==========================================================================================

[
	object,
	uuid(21EB9E48-F9D0-432C-9D99-D4DAFC857125),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IFrame : IDispatch
{
	[propget, id(1)] HRESULT Size       ([out, retval] LONG* pVal);
	
	[propget, id(2)] HRESULT IsEmpty    ([out, retval] VARIANT_BOOL* pVal);
	
	[propget, id(3)] HRESULT Values     ([out, retval] BYTE** pVal);
	
	[id(4)]          HRESULT IsCreated  ([out,retval] VARIANT_BOOL* out_result);

	[id(5)]          HRESULT Create     ([in] LONG size , [in] VARIANT_BOOL initToZero , [out,retval] VARIANT_BOOL* out_result);
	
	[id(6)]          HRESULT CopyFrom   ([in] BYTE* values , [in] LONG size , [out,retval] VARIANT_BOOL* out_result);
	
	[id(7)]          HRESULT GetAt      ([in] LONG index , [out,retval] BYTE* out_result );
	
	[id(8)]          HRESULT SetAt      ([in] LONG index , [in] BYTE value , [out,retval] VARIANT_BOOL* out_result );
	
	[id(9)]          HRESULT Clear      ();
	
	[id(10)]         HRESULT Destroy    ();

};

//==========================================================================================

[
	object,
	uuid(D9E6DB72-ADF0-4605-BF0F-9007D9D3D7E8),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IFrameBuffer : IDispatch
{
	[propget, id(1)] HRESULT CanWrite        ([out, retval] VARIANT_BOOL* pVal);
	
	[propput, id(1)] HRESULT CanWrite        ([in] VARIANT_BOOL newVal);

	[propget, id(2)] HRESULT Limit           ([out, retval] LONG* pVal);
	
	[propput, id(2)] HRESULT Limit           ([in] LONG newVal);
	
	[propget, id(3)] HRESULT Size            ([out, retval] LONG* pVal);
	
	[propget, id(4)] HRESULT IsEmpty         ([out, retval] VARIANT_BOOL* pVal);

	[propget, id(5)] HRESULT IsFull          ([out, retval] VARIANT_BOOL* pVal);
	
	[id(6)]          HRESULT Read            ([out,retval] IFrame** out_result);
	
	[id(7)]          HRESULT Write           ([in] IFrame* frame, [out,retval] VARIANT_BOOL* out_result);
	
	[id(8)]          HRESULT Clear           (void);
	
	[id(9)]          HRESULT Synchronize     ([in] ULONG timeout, [in] ULONG cancelationHandle, [out,retval] VARIANT_BOOL* out_result);

};

//==========================================================================================

[
	object,
	uuid(A72909B5-4EE3-4FB9-A009-AE1FDFA141ED),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoChannel : IDispatch
{
	[propget, id(1)] HRESULT Type          ([out, retval] VIDEO_CHANNEL_TYPES* pVal);
	
	[propget, id(2)] HRESULT UniqueID      ([out, retval] BSTR* pVal);
	
	[propget, id(3)] HRESULT Buffer        ([out, retval] IFrameBuffer** pVal);
	
	[id(4)]          HRESULT IsStarted     ([out,retval]  VARIANT_BOOL* out_result);
	
	[id(5)]          HRESULT Start         ([out,retval]  VARIANT_BOOL* out_result);
	
	[id(6)]          HRESULT Stop          ();
};

//==========================================================================================

[
	object,
	uuid(38C6334A-8DB6-4BD2-B14E-2387F4354EAC),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoChannelList : IDispatch
{
	[propget, id(1)] HRESULT Count         ([out, retval] LONG* pVal);
	[propget, id(2)] HRESULT IsEmpty       ([out, retval] VARIANT_BOOL* pVal);
	[propget, id(3)] HRESULT IsFull        ([out, retval] VARIANT_BOOL* pVal);
	[id(4)]          HRESULT Any           ([out,retval]  VARIANT_BOOL* out_result);
	[id(5)]          HRESULT Contains      ([in] IVideoChannel* channel, [out,retval] VARIANT_BOOL* out_result);
	[id(6)]          HRESULT Exists        ([in] BSTR uniqueID, [out,retval] VARIANT_BOOL* out_result);
	[id(7)]          HRESULT Add           ([in] IVideoChannel* setting, [out,retval] VARIANT_BOOL* out_result);
	[id(8)]          HRESULT FindByID      ([in] BSTR uniqueID, [out,retval] IVideoChannel** out_result);
	[id(9)]          HRESULT FindAt        ([in] LONG index, [out,retval] IVideoChannel** out_result);
	[id(10)]         HRESULT GetByID       ([in] BSTR uniqueID, [out,retval] IVideoChannel** out_result);
	[id(11)]         HRESULT GetAt         ([in] LONG index, [out,retval] IVideoChannel** out_result);
	[id(12)]         HRESULT Remove        ([in] IVideoChannel* channel, [out,retval] VARIANT_BOOL* out_result);
	[id(13)]         HRESULT RemoveByID    ([in] BSTR uniqueID, [out,retval] VARIANT_BOOL* out_result);
	[id(14)]         HRESULT RemoveAt      ([in] LONG index, [out,retval] VARIANT_BOOL* out_result);
	[id(15)]         HRESULT Clear         (void);
};

//==========================================================================================

[
	object,
	uuid(EB0FC088-C97E-4AC6-B7CA-DD975514DB48),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface INullVideoChannel : IDispatch
{
};

//==========================================================================================

[
	object,
	uuid(E2AF5585-4183-435D-9D36-307F4C4B99FE),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IService : IDispatch
{
	[propget, id(1)] HRESULT Type   ([out, retval] SERVICE_TYPES* pVal);
};

//==========================================================================================

[
	object,
	uuid(4FED0BEB-4F27-4F2D-A4CA-70F8F812F66A),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface INullService : IDispatch
{
};

//==========================================================================================

[
	object,
	uuid(1F5A6B21-00A1-4585-BD32-C394BB0124CD),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IConfigurationService : IDispatch
{
	[id(1)]        HRESULT LoadConfiguration          ([out,retval] VARIANT_BOOL* out_result);
	[id(2)]        HRESULT LoadConfigurationFromFile  ([in] BSTR fileName, [out,retval] VARIANT_BOOL* out_result);
	[id(3)]        HRESULT SaveConfiguration          ([out,retval] VARIANT_BOOL* out_result);
	[id(4)]        HRESULT SaveConfigurationFromFile  ([in] BSTR fileName, [out,retval] VARIANT_BOOL* out_result);
	[id(5)]        HRESULT ResetConfiguration         (void);
	[id(6)]        HRESULT ClearAllSettings           (void);
	[id(7)]        HRESULT ReadSetting                ([in] BSTR uniqueID, [out,retval] BSTR* out_result);
	[id(8)]        HRESULT ReadSettingAsBool          ([in] BSTR uniqueID, [out,retval] VARIANT_BOOL* out_result);
	[id(9)]        HRESULT ReadSettingAsLong          ([in] BSTR uniqueID, [out,retval] LONG* out_result);
	[id(10)]       HRESULT WriteSetting               ([in] BSTR uniqueID, [in] BSTR value, [out,retval] VARIANT_BOOL* out_result);
	[id(11)]       HRESULT WriteSettingAsBool         ([in] BSTR uniqueID, [in] VARIANT_BOOL value, [out,retval] VARIANT_BOOL* out_result);
	[id(12)]       HRESULT WriteSettingAsLong         ([in] BSTR uniqueID, [in] LONG value, [out,retval] VARIANT_BOOL* out_result);
};

//==========================================================================================

[
	object,
	uuid(25B97B5F-DF9F-49AC-A0DF-A96F3E24FFB4),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IServiceList : IDispatch
{
	[propget, id(1)] HRESULT Count         ([out, retval] LONG* pVal);
	[propget, id(2)] HRESULT IsEmpty       ([out, retval] VARIANT_BOOL* pVal);
	[id(3)]          HRESULT Any           ([out,retval]  VARIANT_BOOL* out_result);
	[id(4)]          HRESULT Contains      ([in] IService* setting, [out,retval] VARIANT_BOOL* out_result);
	[id(5)]          HRESULT Exists        ([in] SERVICE_TYPES type, [out,retval] VARIANT_BOOL* out_result);
	[id(6)]          HRESULT Add           ([in] IService* setting, [out,retval] VARIANT_BOOL* out_result);
	[id(7)]          HRESULT FindByType    ([in] SERVICE_TYPES type, [out,retval] IService** out_result);
	[id(8)]          HRESULT FindAt        ([in] LONG index, [out,retval] IService** out_result);
	[id(9)]          HRESULT GetByType     ([in] SERVICE_TYPES type, [out,retval] IService** out_result);
	[id(10)]         HRESULT GetAt         ([in] LONG index, [out,retval] IService** out_result);
	[id(11)]         HRESULT Remove        ([in] IService* setting, [out,retval] VARIANT_BOOL* out_result);
	[id(12)]         HRESULT RemoveByType  ([in] SERVICE_TYPES type, [out,retval] VARIANT_BOOL* out_result);
	[id(13)]         HRESULT RemoveAt      ([in] LONG index, [out,retval] VARIANT_BOOL* out_result);
	[id(14)]         HRESULT Clear         (void);
};

//==========================================================================================

[
	object,
	uuid(E1EA218F-2020-43AC-A88F-7361D63E9AE4),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IConfigurationPersistence : IDispatch
{
};

//==========================================================================================

[
	object,
	uuid(00D8E0D4-CAA2-4C3E-93A9-EEB1CF683754),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IServer : IDispatch
{
	[propget, id(1)] HRESULT Settings       ([out, retval] ISettingList** pVal);
	[propget, id(2)] HRESULT VideoChannels  ([out, retval] IVideoChannelList** pVal);
	[propget, id(3)] HRESULT Services       ([out, retval] IServiceList** pVal);
	[id(4)]          HRESULT IsRunning      ([out,retval] VARIANT_BOOL* out_result);
	[id(5)]          HRESULT Run            ([out,retval] VARIANT_BOOL* out_result);
	[id(6)]          HRESULT Shutdown       (void);
};

//==========================================================================================

[
	object,
	uuid(899A9697-4F5F-4D62-844D-6399C8CBEF49),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IServerSite : IDispatch
{
	[propget, id(2)] HRESULT Server     ([out, retval] IServer** pVal);
	
	[propput, id(2)] HRESULT Server     ([in] IServer* newVal);
	
};

//******************************************************************************************
// LIBRARY
//******************************************************************************************






[
	uuid(93C65461-1197-476A-BF43-E7267C5BD30A),
	version(1.0),
]
library VideoProviderLib
{
    importlib("stdole2.tlb");
	
    interface IVideoPlayer;
	interface IVideoChannel;
	interface IService;

    //**************************************************************************************
    [
		uuid(8A072813-842C-47A9-BC25-A278EDF627A1)		
	]
	coclass BackgroundThread
	{
		[default] interface IBackgroundThread;
	};
	
    //**************************************************************************************
    [
		uuid(75089B6B-F287-490E-B2E8-A1B3DE278C89)		
	]
	coclass VideoGraphConfiguration
	{
		[default] interface IVideoGraphConfiguration;
	};
	
    //**************************************************************************************
    [
		uuid(F5B6FC19-9FF7-425F-B10A-72918122E774)		
	]
	coclass VideoGraph
	{
		[default] interface IVideoGraph;
	};
	
    //**************************************************************************************
    [
		uuid(313574A2-BEAD-44C4-A48F-B13AB1AB6E81)		
	]
	coclass MediaMonikerStore
	{
		[default] interface IMediaMonikerStore;
	};
	
    //**************************************************************************************
    [
		uuid(77E06CE8-8CE8-4A8D-9635-5D0543EB557E)		
	]
	coclass MediaMonikerList
	{
		[default] interface IMediaMonikerList;
	};
	
    //**************************************************************************************
    [
		uuid(5E8B2161-B1B3-422F-BC81-325B6D871C04)		
	]
	coclass VideoDeviceInfo
	{
		[default] interface IVideoDeviceInfo;
	};
	
    //**************************************************************************************
    [
		uuid(1D30B373-AE66-4E57-AFCD-BBA251A6A97F)		
	]
	coclass VideoDeviceInfoList
	{
		[default] interface IVideoDeviceInfoList;
	};
	
    //**************************************************************************************
    [
		uuid(AD974153-B805-43B3-8342-DC3ECF5A88FE)		
	]
	coclass VideoDeviceInfoAdapter
	{
		[default] interface IVideoDeviceInfoAdapter;
	};
	
    //**************************************************************************************
    [
		uuid(3A9CE378-1148-4254-9BD7-7BE00A218D21)		
	]
	coclass VideoDeviceInfoDiscovery
	{
		[default] interface IVideoDeviceInfoDiscovery;
	};
	
    //**************************************************************************************
    [
		uuid(7D04D386-38DD-45E7-8C13-B70E474E63AF)		
	]
	coclass DeviceVideoPlayer
	{
		[default] interface IDeviceVideoPlayer;
		          interface IVideoPlayer;
	};
	
    //**************************************************************************************
	[
		uuid(5178F473-FB35-48A1-B6E5-119F682446E0)		
	]
	coclass Test
	{
		[default] interface ITest;
	};
	
    //**************************************************************************************
	[
		uuid(702D508C-EA39-4EE1-B7D2-B52C48A8C3C6)		
	]
	coclass VideoGraphRunner
	{
		[default] interface IVideoGraphRunner;
	};

    //**************************************************************************************
    [
        uuid(E9BC3B52-16A1-42B6-8D5D-5B757DD75079)		
	]
	coclass Setting
	{
        [default] interface ISetting;
	};
	
    //**************************************************************************************
    [
		uuid(DF316BA8-D0F8-4CF4-AB63-BCC0152D178A)		
	]
	dispinterface _ISettingListEvents
	{
		properties:
		methods:
			[id(1)] HRESULT OnAdded    ([in] BSTR uniqueID);
			[id(2)] HRESULT OnRemoved  ([in] BSTR uniqueID);
	};
	
    [
		uuid(9968A980-6B7B-45D4-8A5A-7B51B7C85C3A)		
	]
	coclass SettingList
	{
		[default] interface ISettingList;
		[default, source] dispinterface _ISettingListEvents;
	};
	
    //**************************************************************************************
    [
		uuid(3A3D84A3-2417-4506-A07A-C44F434A88E8)		
	]
	coclass SettingFactory
	{
		[default] interface ISettingFactory;
	};

    //**************************************************************************************
	[
		uuid(FC2663D7-CA8D-4FDA-830A-F83EFDC08AEF)		
	]
	coclass Frame
	{
		[default] interface IFrame;
	};

    //**************************************************************************************
	[
		uuid(F7372E85-17D5-435B-A276-A37FE6CC1A34)		
	]
	coclass FrameBuffer
	{
		[default] interface IFrameBuffer;
	};

    //**************************************************************************************
	[
		uuid(FAD0E5E2-C398-476D-B447-DD01CDE70FAE)		
	]
	dispinterface _IVideoChannelListEvents
	{
		properties:
		methods:
			[id(1)] HRESULT OnAdded    ([in] BSTR uniqueID);
			[id(2)] HRESULT OnRemoved  ([in] BSTR uniqueID);
	};

  	[
		uuid(DEF3397A-EF27-4B96-AFC0-9DB8AD492268)		
	]
	coclass VideoChannelList
	{
		[default] interface IVideoChannelList;
		[default, source] dispinterface _IVideoChannelListEvents;
	};

	//**************************************************************************************
	[
		uuid(9A8F0C4F-94DB-4EC5-94E5-A98DC2CC0208)		
	]
	coclass NullVideoChannel
	{
		[default] interface INullVideoChannel;
		          interface IVideoChannel;
	};
	
	//**************************************************************************************
	[
		uuid(890BFF23-9E26-4974-8A55-D57F9CDDC35B)		
	]
	coclass NullService
	{
		[default] interface INullService;
	};

	//**************************************************************************************
	[
		uuid(463DB7A1-02DE-47CF-ABA0-F50B4974A444)		
	]
	coclass ConfigurationService
	{
		[default] interface IConfigurationService;
		          interface IService;
	};

	//**************************************************************************************
	[
		uuid(1169736D-92A2-4351-A53C-E69E4814D065)		
	]
	dispinterface _IServiceListEvents
	{
		properties:
		methods:
			[id(1)] HRESULT OnAdded    ([in] SERVICE_TYPES type);
			[id(2)] HRESULT OnRemoved  ([in] SERVICE_TYPES type);
	};

	//**************************************************************************************
	[
		uuid(B9BE617D-F6C4-48E7-BFDF-507EA5DD8174)		
	]
	coclass ServiceList
	{
		[default] interface IServiceList;
		[default, source] dispinterface _IServiceListEvents;
	};
	
	//**************************************************************************************
	[
		uuid(1F6B6C21-67B8-45E5-B39F-BA8E6EE1A24C)		
	]
	coclass ConfigurationPersistence
	{
		[default] interface IConfigurationPersistence;
	};
	
	//**************************************************************************************
	[
		uuid(6F28AF56-D1CB-4E04-ABAF-A05E892F90CA)		
	]
	dispinterface _IServerEvents
	{
		properties:
		methods:
			[id(1)] HRESULT OnStarted  ([in] SERVICE_TYPES type);
			[id(2)] HRESULT OnStopped  ([in] SERVICE_TYPES type);
	};
	
	//**************************************************************************************
	[
		uuid(7BBB6084-1385-4099-8289-1CEC1A95B383)		
	]
	coclass Server
	{
		[default] interface IServer;
		[default, source] dispinterface _IServerEvents;
	};
};
